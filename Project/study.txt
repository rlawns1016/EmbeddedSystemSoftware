[19.06.04]

- Reference : 

http://www.linux-usb.org/USB-guide/c15.html
https://programmer.group/linux-usb-subsystem-2-_usb-skeleton.c-analysis.html
http://furmuwon.egloos.com/category/Embedded Linux USB
USB Driver Programming Guide For Linux


- Bandwidth Limit

The current implementation of the USB allows 127 devices to be connected at the same time and the total communication bandwidth is limited to 12Mbit/s. Howewer use of low speed devices, management of USB "interrupts" and other overheads mean that actual throughput cannot exceed about 8.5Mbit/s under near ideal conditions, and typical performance may be around 2Mbit/s.


- Connection Scheme

The USB is strictly hierarchical and it is controlled by one host. The host uses a master / slave protocol to communicate with attached USB devices. This means that every kind of communication is initiated by the host and devices cannot establish any direct connection to other devices.

host - device 개념으로 host(master)만 device(slave)로 connection 을 establish 할 수 있다.(데이터를 주고받는건 문제 없을 듯.) (2.0까지는 반이중통신을 지원하나, 3.0은 데이터 채널이 2개이기 때문에 전 이중 통신을 할 수 있고, 하위 호환을 위하는 채널이 따로 있어서 총 3개의 채널이다. - https://namu.wiki/w/USB/%EB%B2%84%EC%A0%84) (현재 우리 보드에 올라간 achroimx_kernel(linux 3.10.17)에서 쓰는 usb 버전은 2.x인 듯.)

	
- Data Flow Types

Host ----------------------------> Device
	downstream(OUT transfer)

Host <---------------------------- Device
	upstream(IN transfer)


Device type에 따라 사용하는 전송방식이 달라짐. 크게 4가지가 있다.

Control trnasfer : reliable한 short data packet을 reques하거나 send할 때 사용, device를 configure할 때 사용되며 모든 control transfer들은 최소 제어 명령어 set을 support한다.
The standard commands are:

GET_STATUS
CLEAR_FEATURE
SET_FEATURE
SET_ADDRESS
GET_DESCRIPTOR
SET_DESCRIPTOR
GET_CONFIGURATION
SET_CONFIGURATION
GET_INTERFACE
SET_INTERFACE
SYNCH_FRAME

Further control commands can be used to transfer vendor specific data. 

Bulk transfer : reliable한 data packet들을 full bus bandwidth로 보낸다. scanner나 scsi adapters. 

Interrupt transfer : bulk 방식이랑 비슷, polling 사용, host driver에서 주기적으로 체크하는듯? 

Ishchronos transfer : data stream을 주고받을 때 사용. reliability 는 떨어지나 real time 방식,  audio나 video device,


- Enumeration and Device Descriptors

Host의 usb hub에 device가 attach 되면 enumerate됨.
Host가 device에 device 번호를 부여하고 device 의 usb descriptor를 읽음.
descriptor : device에 관한 정보와 properties를 포함하고 있음

standard descriptors 

Device Descriptor : USB device에 대한 general information(applies globally to the device and all of the device s configurations.) USB device는 단 하나의 device descriptor를 갖는다.

Configuration Descriptor : USB device에 대한 specific한 device configuration. USB device는 하나 이상의 configuration descriptor를 갖을 수 있다. 각 configuration descriptor는 하나 이상의 interface를 갖을 수 있고, 각 interface는 0개 이상의 end point를 갖을 수 있다. end point는 하나의 confirguration 안에서 서로 다른 interface에 의해 공유되지 않는다. 하지만 하나의 interface가 서로 다른 setting으로 같은 end point 사용 가능.
configuration은 오직 standard controll transfer인 set_configuration으로 activate 된다.

Interface Descriptor : 특정 configuration 안에서 specific한 interface 정보 제공. An interface may include alternate settings that allow the endpoints and/or their characteristics to be varied after the device has been configured. The default setting for an interface is always alternate setting zero. Alternate settings can be selected exclusively by the standard control transfer set_interface. For example a multifunctional device like a video camera with internal microphone could have three alternate settings to change the bandwidth allocation on the bus.
Camera activated
Microphone activated
Camera and microphone activated 

Endpoint Descriptor : 각 endpoint 마다 얼마만큼의 bandwidth가 필요한지에 관한 정보를 제공(이를 통해 host가 각 endpoint의 bandwidth 결정.) endpoint는 logical data source나 USB device의 sink를 represent한다. 0번 endpoint는 control transfer가 사용(descriptor가 따로 존재하지 않음.)

String Descriptor : optional, unicode format으로 human readable한 정보 제공. vendor and device name이나 serial number 등


Q. 보드마다 정의된 USB Descriptor 를 따로 수정 / 추가를 해줘야하나? 아니면 기존의 Descriptor를 사용해도 되나..?
Descriptor를 건드리면 kernel의 usb subsystem도 건드려야하지 않나

 
- Device Classes

Standard device, interface descriptor는 classification(class, sub-class, protocol)에 관한 field를 포함한다. 이 field는 Host가 device나 interface를 driver와 associate 할 때 사용. 이 field의 Valid value들은 USB Device Working Group에 define 되어 있음


- Device Drivers

각 interface마다 device driver를 구현 할 수 있고, interface들을 통합해서 하나의 driver에 구현할 수 있다고 함.


- usb-skeleton.c (BULK 방식으로 구현되어 있다고 함.)

USB driver의 경우 usb_driver object를 생성해서 kernel(의 subsystem)에 등록해줘야함
(다시말하면 subsystem에서 사용할 수 있도록 정해진 interface에 맞게 구현해야한다는 말이고 아래 structure가 그 interface 내용이라 생각하면 될 듯) 

static struct usb_driver skel_driver = {
	.name =		"skeleton",
	.probe =	skel_probe,
	.disconnect =	skel_disconnect,
	.suspend =	skel_suspend,
	.resume =	skel_resume,
	.pre_reset =	skel_pre_reset,
	.post_reset =	skel_post_reset,
	.id_table =	skel_table,
	.supports_autosuspend = 1,
};


subsystem에 register은 init 함수에서 수행. unregister는 exit 함수에서 수행.

static int __init usb_skel_init(void)
{
	int result;

	/* register this driver with the USB subsystem */
	result = usb_register(&skel_driver);
	if (result)
		err("usb_register failed. Error number %d", result);

	return result;
}

static void __exit usb_skel_exit(void)
{
	/* deregister this driver with the USB subsystem */
	usb_deregister(&skel_driver);
}


probe : device를 검출하는 function. 이것은 kernel에서 정확한 USB driver를 선택할 수 있도록 도와주며 새로운 device가 검출될 때 호출
대부분의 초기화 작업을 여기서 수행한다고 함.



	
disconnect : 더이상 device가 사용되지 않을 때 호출, probe에서 할당한 자원을 여기서 release


[19.06.11]
(밑에서부터는 하위버젼에 해당하는듯, 현재 usb-skeleton.c에는 저 usb_driver 구조체 안에 없다.)

Driver_list : subsystem에서 내부적으로 사용하며 { NULL, NULL }로 초기화
(이건 어디에있는지 모르겠음. 사라진건가)

Fops : module에서 사용하는 file operation들

Minor : device에 할당된 base minor number
(위 2개는

static struct usb_class_driver skel_class = {
	.name =		"skel%d",
	.fops =		&skel_fops,
	.minor_base =	USB_SKEL_MINOR_BASE,
};

여기에 등록되어있음)

다음내용은 probe 함수에 대한 자세한 설명인데, 문서의 리눅스 버전이 우리가 개발해야하는 버전과달라서 사용하는 구조체들이 많이 다르다. 그거에 대해 정리하고 넘어가야 할듯..

#define USB_SKEL_VENDOR_ID	0xfff0
#define USB_SKEL_PRODUCT_ID	0xfff0

/* table of devices that work with this driver */
static const struct usb_device_id skel_table[] = {
	{ USB_DEVICE(USB_SKEL_VENDOR_ID, USB_SKEL_PRODUCT_ID) },
	{ }					/* Terminating entry */
};
MODULE_DEVICE_TABLE(usb, skel_table);

어느 device가 우리가 구현한 driver와 matching 될지를 정의해준다고 생각하면 될 듯. 위의 define문 2개에서 우리 보드의 vendor id와 product id 를 써주면 된다. 



/* Structure to hold all of our device specific stuff */
struct usb_skel {
	struct usb_device	*udev;			/* the usb device for this device */
	struct usb_interface	*interface;		/* the interface for this device */
	struct semaphore	limit_sem;		/* limiting the number of writes in progress */
	struct usb_anchor	submitted;		/* in case we need to retract our submissions */
	struct urb		*bulk_in_urb;		/* the urb to read data with */
	unsigned char           *bulk_in_buffer;	/* the buffer to receive data */
	size_t			bulk_in_size;		/* the size of the receive buffer */
	size_t			bulk_in_filled;		/* number of bytes in the buffer */
	size_t			bulk_in_copied;		/* already copied to user space */
	__u8			bulk_in_endpointAddr;	/* the address of the bulk in endpoint */
	__u8			bulk_out_endpointAddr;	/* the address of the bulk out endpoint */
	int			errors;			/* the last request tanked */
	int			open_count;		/* count the number of openers */
	bool			ongoing_read;		/* a read is going on */
	bool			processed_urb;		/* indicates we haven't processed the urb */
	spinlock_t		err_lock;		/* lock for errors */
	struct kref		kref;
	struct mutex		io_mutex;		/* synchronize I/O with disconnect */
	struct completion	bulk_in_completion;	/* to wait for an ongoing read */
};

대충 보면 Device마다 specific하게 정의될 수 있는 옵션(?)들을 access할 수 있게 해주는듯.

usb-skeleton.c의 대부분 함수들에서

struct usb_skel *dev; 이렇게 선언해두고

dev = file->private_data; 이렇게 reference해서 필요한 정보들을 뽑아 쓰고있다.

저 file 포인터는 파라메터로 넘어오는 건데 kernel의 usb subsystem이 넘겨주는건지, file system에서 넘겨주는건지는 잘 모르겠다..
(문서보니까 app <-> usb client driver <-> usb core <-> host controller driver <-> host controller <-> usb device 이렇게 나와있음.)

static const struct file_operations skel_fops = {
	.owner =	THIS_MODULE,
	.read =		skel_read,
	.write =	skel_write,
	.open =		skel_open,
	.release =	skel_release,
	.flush =	skel_flush,
	.llseek =	noop_llseek,
};
이거는 수업시간에 배운 fop다. 밑에 있는 flush랑 llseek는 따로 구현 안해도 될 듯



/*
 * usb class driver info in order to get a minor number from the usb core,
 * and to have the device registered with the driver core
 */
static struct usb_class_driver skel_class = {
	.name =		"skel%d",
	.fops =		&skel_fops,
	.minor_base =	USB_SKEL_MINOR_BASE,
};

이거는 usb class 관련한 구조체인데 주석에 있는 usb core와 driver core가 뭘 의미하는지는 잘 모르겠다. 근데 kernel의 usb subsystem이 이걸 가져다 쓰는거 같다.
(문서에는 
"USB Core가 하는 역할은 Hardware와 device dependent한 부분을 data structure와 macro를 정의해서 abstract하게 하는 역할을 한다. 즉, USB core는 USB device driver들과 Host controller driver에 일반적인 routine들을 가진다. 이것의 주된 목적은 hardware나 device에 dependent한 부분들에 대해서 data structure와 function, macro등을 제공하는 것이다. 이렇게 함으로 해서 상위에 올라갈 program들이 이것을 이용해서 hardware나 device에 손쉽게 접근하게 되는 것이다." 
usb core는 그냥 usb subsystem에 대한 abstraction을 제공해주는 듯)


static struct usb_driver skel_driver = {
	.name =		"skeleton",
	.probe =	skel_probe,
	.disconnect =	skel_disconnect,
	.suspend =	skel_suspend,
	.resume =	skel_resume,
	.pre_reset =	skel_pre_reset,
	.post_reset =	skel_post_reset,
	.id_table =	skel_table,
	.supports_autosuspend = 1,
};
이것도 마찬가지로 sub system이 쓸 수 있도록 해주는듯

문서부터 읽는 것보다 usb-skeleton.c 에 있는 함수들이 어떻게 구현되어 있는지 살펴보고 문서를 읽어보는 것이 도움이 될 것 같다.


[19.06.12]

usb-skeleton.c를 make해서 간단한 user program을 작성하여 test 해보고 싶었는데

device file를 mknod를 통해 만들어야하는지 아닌지 어떻게 해야 할지 모르겠어서 인터넷을 찾아봤다.

생각해보니 usb device file은 이미 구현되어 있을 것 같다.

device file은 "/dev/bus/usb/002/device 번호" 이런식으로 사용하면 된다고 한다. (아직 test는 안해봄)

usb-skeleton.c (define 문에서 Vendor ID와 Product ID만 수정) 를 insmod하고 보드와 보드를 usb로 연결하니 이런 문구가 나왔다. (HOST)


[  199.665175] usb 2-1.2: new high speed USB device number 4 using fsl-ehci
[  199.861760] skeleton 2-1.2:1.0: USB Skeleton device now attached to USB0
[  199.873272] skeleton 2-1.2:1.1: USB Skeleton device now attached to USB1

그런데 Host쪽에서 usb를 뽑았다 다시 끼면

[  199.665175] usb 2-1.2: new high speed USB device number 5 using fsl-ehci
[  199.861760] skeleton 2-1.2:1.0: USB Skeleton device now attached to USB0
[  199.873272] skeleton 2-1.2:1.1: USB Skeleton device now attached to USB1

이런식으로 device number가 하나씩 증가해버린다..

실제로 /dev/bus/usb/002/ 에 가보면 001 002 003 파일은 이미 존재하고 있고, 004 -> 005 이런식으로 뽑았다 낄때마다 파일들이 생겼다 지워지고 새로 생기고를 반복함.. 

보드를 키고 driver를 insmod하고 usb를 연결하면 최초 번호는 004이므로 test용 user program은 일단 004로 해서 해봐야할듯.. 아무튼 위의 문구에 skeleton 어쩌고 저쩌고 뜨는 것 보니 driver는 제대로 컴파일 되었고, usb core에 제대로 붙었고 device도 제대로 인식하는 것 같다.

Q. HOST쪽에만 device driver를 insmod 해놨는데 나중엔 Device쪽에도 insmod 해줘야 하지 않나
   

2-1.2:1.0 과 2-1.2:1.1의 의미는 아래와 같다고 한다.

example:
2-1.3.4.3
2: bus (2번째 host controller) 에
1: root hub 에 A hub 가 붙어서 "2-1". A hub 의 이름은 "2-1" 이다.
3: A hub 의 3번째 port 에 B hub 가 붙어서 "2-1.3", B hub 의 이름은 "2-1.3" 이다.
4: B hub 의 4번째 port 에 C hub 가 붙어서 "2-1.3.4", C hub 의 이름은 "2-1.3.4" 이다.
3: C hub 의 3번째 port 에 어떤 Z device 붙어서 "2-1.3.4.3", Z device 의 이름은 "2-1.3.4.3" 이다.





static void skel_delete(struct kref *kref)
{
	struct usb_skel *dev = to_skel_dev(kref);

	usb_free_urb(dev->bulk_in_urb);
	usb_put_dev(dev->udev);
	kfree(dev->bulk_in_buffer);
	kfree(dev);
}

kref가 정확히 뭘의미하는지 모르겠다. kernel reference의 줄임말인지.. 어쨌든 저 kref라는 포인터로 usb device 구조체를 가져온다. to_skel_dev는 매크로인데

#define to_skel_dev(d) container_of(d, struct usb_skel, kref)

이는 Pintos할 때 썼던 매크로와 유사한 것 같다.

usb_free_urb에서 urb란 USB Request Block의 약자로 모든 USB 전송에 관련되어 하위 드라이버와 통신하기위한 기본 자료구조라고 한다.






